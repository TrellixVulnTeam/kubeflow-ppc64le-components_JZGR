name: Convert model to onnx
description: 'Converts a model to ONNX format. Supported input formats: Keras.'
inputs:
- {name: model, type: String}
outputs:
- {name: onnx_model, type: String}
implementation:
  container:
    image: quay.io/ibm/kubeflow-component-tensorflow-cpu:latest
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def convert_model_to_onnx(
          model,
          onnx_model
      ):
          """Converts a model to ONNX format. Supported input formats: Keras."""

          import onnx
          import sys
          import tensorflow as tf
          import tf2onnx
          import logging

          logging.basicConfig(
              stream=sys.stdout,
              level=logging.INFO,
              format='%(levelname)s %(asctime)s: %(message)s'
          )

          logging.info(f"Loading model from '{model}'...")
          keras_model = tf.keras.models.load_model(model)

          logging.info("Converting model to ONNX...")
          converted_model, _ = tf2onnx.convert.from_keras(keras_model)

          logging.info(f"Saving ONNX model to '{onnx_model}'...")
          onnx.save_model(converted_model, onnx_model)

          logging.info("Finished.")

      import argparse
      _parser = argparse.ArgumentParser(prog='Convert model to onnx', description='Converts a model to ONNX format. Supported input formats: Keras.')
      _parser.add_argument("--model", dest="model", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--onnx-model", dest="onnx_model", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = convert_model_to_onnx(**_parsed_args)
    args:
    - --model
    - {inputPath: model}
    - --onnx-model
    - {outputPath: onnx_model}

