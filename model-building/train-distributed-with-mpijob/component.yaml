name: Train Distributed with MPIJob
inputs:
- {name: Model Name, type: String, default: 'my-model', description: 'Name of the model. Must be unique for the targeted namespace and conform Kubernetes naming conventions. Example: my-model.'}
- {name: Image, type: String, default: 'quay.io/ibm/kubeflow-notebook-image-ppc64le:elyra3.9.0-py3.8-tensorflow-gpu2.8.0', description: 'Base image for model training. Example: quay.io/ibm/kubeflow-notebook-image-ppc64le:elyra3.9.0-py3.8-tensorflow-gpu2.8.0.'}
- {name: Args, type: JsonArray, description: 'MPI arguments passed to the given command. Example: ["--allow-run-as-root"].'}
- {name: Namespace, type: String, default: 'user-example-com', description: 'The namespace where the MPIJob and associated volumes will be created. Example: user-example-com.'}
- {name: Number of Workers, type: Integer, default: '2', description: 'Number of worker replicas for the MPIJob. Example: 2.'}
- {name: PVC Size, type: String, default: '10Gi', description: 'Size of the storage during model training. Storage is mounted into to the MPIJob based on a persitent volume claim of the given size. Example: 10Gi.'}
outputs:
- {name: Results, type: String, description: 'Result outputs of the MPIJob. Example: ...MPIJob finished successfully.'}
metadata:
  annotations:
    author: Sebastian Lehrig <Sebastian.Lehrig1@ibm.com>
implementation:
  container:
    image: quay.io/ibm/kubeflow-component-base-image-k8s-client:latest
    command:
    - bash
    - -exc
    - |
      model_name=$0
      image=$1
      args=$2
      namespace=$3
      number_of_workers=$4
      pvc_size=$5
      output_results=$6

      epoch=$(date +%s)
      job_name=mpijob-$model_name-$epoch
      mkdir -p "$(dirname "$output_results")"

      echo "Starting MPIJob application '${job_name}'"

      cat <<EOF | kubectl apply -f -
      apiVersion: kubeflow.org/v1
      kind: MPIJob
      metadata:
        name: ${job_name}
        namespace: ${namespace}
      spec:
        slotsPerWorker: 1
        runPolicy:
          cleanPodPolicy: Running
        mpiReplicaSpecs:
          Launcher:
            replicas: 1
            template:
              metadata:
                annotations:
                  sidecar.istio.io/inject: "false"
              spec:
                containers:
                - image: ${image}
                  name: mpi-launcher
                  command:
                  - mpirun
                  args: ${args}
                  resources:
                    limits:
                      cpu: 1
                      memory: 2Gi
          Worker:
            replicas: ${number_of_workers}
            template:
              metadata:
                annotations:
                  sidecar.istio.io/inject: "false"
              spec:
                nodeSelector:
                  nvidia.com/gpu.product: "Tesla-V100-SXM2-32GB"
                containers:
                - image: ${image}
                  name: mpi-worker
                  volumeMounts:
                    - mountPath: /train
                      name: training
                  resources:
                    limits:
                      cpu: 2
                      memory: 4Gi
                      nvidia.com/gpu: 1
                volumes:
                  - name: training
                    persistentVolumeClaim:
                      claimName: ${job_name}-pvc
      ---
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: ${job_name}-pvc
        labels:
          app: strategy-volume
      spec:
        accessModes:
        - ReadWriteMany
        resources:
          requests:
            storage: 10Gi
      EOF

      echo "Waiting for MPIJob to be created..."
      kubectl wait -n ${namespace} --for=condition=Created --timeout=600s mpijob/${job_name}

      echo "Waiting for MPIJob to run..."
      kubectl wait -n ${namespace} --for=condition=Running --timeout=600s mpijob/${job_name}

      echo "Waiting for MPIJob to succeed..."
      kubectl wait -n ${namespace} --for=condition=Running=false --timeout=-1s mpijob/${job_name}

      echo "MPIJob finished. Exporting results..."
      for ((i=0; i<number_of_workers; i++)); do
        echo "===================================================================" >> "$output_results"
        echo "== Logs of MPIJob pod ${job_name}-worker-${i}" >> "$output_results"
        echo "===================================================================" >> "$output_results"
        kubectl logs -n ${namespace} ${job_name}-worker-${i} >> "$output_results"
        echo "" >> "$output_results"
      done

      echo "Deleting MPIJob resources..."
      kubectl delete MPIJob -n ${namespace} ${job_name}

      echo "Finished."
    - {inputValue: Model Name}
    - {inputValue: Image}
    - {inputValue: Args}
    - {inputValue: Namespace}
    - {inputValue: Number of Workers}
    - {inputValue: PVC Size}
    - {outputPath: Results}
